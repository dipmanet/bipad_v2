import React from "react";
import { connect } from "react-redux";
import { _cs } from "@togglecorp/fujs";
import memoize from "memoize-one";
import {
	ResponsiveContainer,
	XAxis,
	YAxis,
	BarChart,
	Bar,
	Tooltip,
	ReferenceLine,
	Brush,
} from "recharts";

import { Translation } from "react-i18next";
import Button from "#rsca/Button";
import DangerButton from "#rsca/Button/DangerButton";
import SelectInput from "#rsci/SelectInput";
import Modal from "#rscv/Modal";
import ModalHeader from "#rscv/Modal/Header";
import ModalBody from "#rscv/Modal/Body";

import { saveChart } from "#utils/common";

import { languageSelector, municipalitiesMapSelector } from "#selectors";

import { VulnerabilityType } from "#types";
import vulnerabilityTypes from "../vulnerabilityTypes";
import styles from "./styles.module.scss";

interface Props {
	className?: string;
}

const mapStateToProps = (state) => ({
	municipalities: municipalitiesMapSelector(state),
	language: languageSelector(state),
});

const vulnerabilityList = vulnerabilityTypes
	.map((v) => {
		if (v.children.length !== 0) {
			return v.children;
		}

		return [v];
	})
	.flat()
	.map((d) => ({ id: d.id, title: d.title, titleNe: d.titleNe }));

const keySelector = (d: VulnerabilityType) => d.id;
const labelSelector = (d: VulnerabilityType, language: string) =>
	language === "en" ? d.title : d.titleNe;

class VulnerabilityVisualizations extends React.PureComponent<Props> {
	public state = {
		selectedVulnerability: vulnerabilityList[0].id,
	};

	private handleSaveClick = () => {
		const { selectedVulnerability } = this.state;
		saveChart("vulnerability", `${selectedVulnerability}`);
	};

	private getAverage = memoize((data, dataIndicator) => {
		if (!data || data.length === 0) {
			return 0;
		}

		let sum = 0;
		data.forEach((d) => {
			sum += d.data[dataIndicator];
		});

		return sum / data.length;
	});

	private getSortedData = memoize((data, municipalities) => {
		const sortedData = [...data];
		sortedData.sort((a, b) =>
			municipalities[a.municipality].title.localeCompare(municipalities[b.municipality].title)
		);

		return sortedData;
	});

	private handleVulnerabilitySelectInputChange = (selectedVulnerability) => {
		this.setState({ selectedVulnerability });
	};

	public render() {
		const {
			data,
			className,
			closeModal,
			municipalities,
			language: { language },
		} = this.props;

		const { selectedVulnerability } = this.state;

		const average = this.getAverage(data, selectedVulnerability);
		const dataIndicator = `data.${selectedVulnerability}`;
		const sortedData = this.getSortedData(data, municipalities);
		const selected = vulnerabilityList.find((v) => v.id === selectedVulnerability);
		const selectedTitle = language === "en" ? selected.title : selected.titleNe;
		const municipalitiesTitle = (d) =>
			language === "en"
				? municipalities[d].title
				: municipalities[d].title_ne === undefined
				? municipalities[d].title
				: municipalities[d].title_ne;

		return (
			<Translation>
				{(t) => (
					<Modal className={_cs(className, styles.vulnerabilityVisualizations)}>
						<ModalHeader
							title={t("Visualizations")}
							rightComponent={
								<div className={styles.rightComponent}>
									<SelectInput
										options={vulnerabilityList}
										value={selectedVulnerability}
										onChange={this.handleVulnerabilitySelectInputChange}
										showLabel={false}
										showHintAndError={false}
										keySelector={keySelector}
										labelSelector={(d) => labelSelector(d, language)}
										className={styles.vulnerabilitySelectInput}
										hideClearButton
									/>
									<Button
										title="Download Chart"
										transparent
										onClick={this.handleSaveClick}
										iconName="download"
									/>
									<DangerButton
										transparent
										iconName="close"
										onClick={closeModal}
										title="Close Modal"
										className={styles.closeButton}
									/>
								</div>
							}
						/>
						<ModalBody className={styles.body}>
							<div
								className={_cs(
									styles.visualizationContainer,
									language === "np" && styles.languageFont
								)}
								id="vulnerability">
								<ResponsiveContainer>
									<BarChart data={sortedData} layout="vertical">
										<Brush
											tickFormatter={(d) => municipalitiesTitle(d)}
											dataKey="municipality"
											height={30}
											stroke="#9dc6e0"
											endIndex={30}
										/>
										<Tooltip
											formatter={(value) => [value, selectedTitle]}
											labelFormatter={(d) => municipalitiesTitle(d)}
										/>
										<Bar layout="vertical" dataKey={dataIndicator} fill="#9dc6e0" />
										<XAxis dataKey={dataIndicator} type="number" />
										<YAxis
											tickFormatter={(d) => municipalitiesTitle(d)}
											dataKey="municipality"
											type="category"
											width={200}
										/>
										<ReferenceLine
											x={average}
											label={language === "en" ? "National average" : "राष्ट्रिय औसत"}
										/>
									</BarChart>
								</ResponsiveContainer>
							</div>
						</ModalBody>
					</Modal>
				)}
			</Translation>
		);
	}
}

export default connect(mapStateToProps)(VulnerabilityVisualizations);
