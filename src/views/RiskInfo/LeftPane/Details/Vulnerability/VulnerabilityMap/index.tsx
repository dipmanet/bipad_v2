import React from 'react';
import memoize from 'memoize-one';
import { extent } from 'd3-array';
import { isNotDefined } from '@togglecorp/fujs';
import { generateLegendData } from '#utils/domain';

import {
    VulnerabilityItem,
    MapState,
    LegendItem,
} from '#types';
import Legend from '#rscz/Legend';
import ChoroplethMap from '#components/ChoroplethMap';

import styles from './styles.scss';

interface Props {
    vulnerabilityIndicator: string | undefined;
    vulnerabilityData: VulnerabilityItem[];
}

interface State {
}

const colorGrade = [
    '#31a354',
    '#93ce82',
    '#ddf1b3',
    '#fef6cb',
    '#f2b294',
    '#d7595d',
    '#e31a1c',
    '#bd0026',
];

const keySelector = (d: LegendItem) => d.label;
const labelSelector = (d: LegendItem) => d.label;
const colorSelector = (d: LegendItem) => d.color;

export default class VulnerabilityMap extends React.PureComponent<Props, State> {
    private generateMapState = (
        vulnerability: VulnerabilityItem[],
        indicator: string | undefined,
    ) => {
        const value = vulnerability.map(item => ({
            id: item.municipality,
            value: {
                value: indicator ? item.data[indicator] : 0,
            },
        }));

        return value;
    };

    private generateColor = memoize(
        (maxValue: number, minValue: number, colorMapping: string[]) => {
            const newColor: (string | number)[] = [];
            const { length } = colorMapping;
            const range = maxValue - minValue;
            if (isNotDefined(maxValue) || isNotDefined(minValue) || maxValue === minValue) {
                return [];
            }
            if (maxValue <= 1) {
                colorMapping.forEach((color, i) => {
                    const val = minValue + ((i * range) / (length - 1));
                    newColor.push(val);
                    newColor.push(color);
                });
            } else {
                colorMapping.forEach((color, i) => {
                    const val = minValue + Number(((i * range) / (length - 1)).toFixed());
                    newColor.push(val);
                    newColor.push(color);
                });
            }

            return newColor;
        },
    )

    private getLegendData = memoize(generateLegendData);

    private generatePaint = memoize((color: (string | number)[]) => {
        if (color.length <= 0) {
            return {
                'fill-color': 'white',
                'fill-opacity': 0.1,
            };
        }

        const fillColor = [
            'case',
            ['==', ['feature-state', 'value'], null],
            'white',
            [
                'interpolate',
                ['linear'],
                ['feature-state', 'value'],
                ...color,
            ],
        ];

        const fillOpacity = [
            'case',
            ['==', ['feature-state', 'value'], null],
            0.1,
            1,
        ];

        return ({
            'fill-color': fillColor,
            'fill-opacity': fillOpacity,
        });
    })

    public render() {
        const {
            vulnerabilityData,
            vulnerabilityIndicator,
        } = this.props;

        const mapState = this.generateMapState(vulnerabilityData, vulnerabilityIndicator);

        const [min, max] = extent(mapState, (d: MapState) => d.value.value);
        const color = this.generateColor(max, min, colorGrade);
        const colorPaint = this.generatePaint(color);

        const legendData = this.getLegendData(color);

        return (
            <div className={styles.map}>
                <ChoroplethMap
                    paint={colorPaint}
                    mapState={mapState}
                    regionLevel={2}
                />
                <div className={styles.legendContainer}>
                    <h4 className={styles.heading}>
                        Legend
                    </h4>
                    <Legend
                        className={styles.legend}
                        data={legendData}
                        itemClassName={styles.legendItem}
                        keySelector={keySelector}
                        labelSelector={labelSelector}
                        colorSelector={colorSelector}
                        emptyComponent={null}
                    />
                </div>
            </div>
        );
    }
}
