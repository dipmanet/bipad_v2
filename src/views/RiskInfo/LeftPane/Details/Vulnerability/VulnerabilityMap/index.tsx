import React from 'react';
import memoize from 'memoize-one';
import { extent } from 'd3-array';
import { isNotDefined } from '@togglecorp/fujs';
import { generateLegendData } from '#utils/domain';

import {
    VulnerabilityType,
    VulnerabilityItem,
    MapState,
    LegendItem,
} from '#types';
import Legend from '#rscz/Legend';
import ChoroplethMap from '#components/ChoroplethMap';

import { flatVulnerabilityTypes } from '../vulnerabilityTypes';
import styles from './styles.scss';

interface Props {
    vulnerabilityIndicator: string | undefined;
    vulnerabilityData: VulnerabilityItem[];
}

interface State {
}

interface TooltipParams {
    feature: unknown;
    indicator: VulnerabilityType | undefined;
}

const colorGrade = [
    '#24b557',
    '#72bd50',
    '#a3c352',
    '#ccc95e',
    '#f0ce72',
    '#ebac55',
    '#e38841',
    '#da6237',
    '#cc3535',
];

const keySelector = (d: LegendItem) => d.label;
const labelSelector = (d: LegendItem) => d.label;
const colorSelector = (d: LegendItem) => d.color;

const Tooltip = ({ feature, indicator }: TooltipParams) => {
    const { properties: { title }, state: { value } } = feature;

    if (indicator) {
        const valueText = `${indicator.label} : ${value}`;

        return (
            <div className={styles.tooltip}>
                <div className={styles.title}>{title}</div>
                <div className={styles.value}>{valueText}</div>
            </div>
        );
    }

    return (
        <div className={styles.tooltip}>
            <div className={styles.title}>{title}</div>
        </div>
    );
};

export default class VulnerabilityMap extends React.PureComponent<Props, State> {
    private generateMapState = (
        vulnerability: VulnerabilityItem[],
        indicator: string | undefined,
    ) => {
        const value = vulnerability.map(item => ({
            id: item.municipality,
            value: indicator ? item.data[indicator] : 0,
        }));

        return value;
    };

    private generateColor = memoize(
        (maxValue: number, minValue: number, colorMapping: string[]) => {
            const newColor: (string | number)[] = [];
            const { length } = colorMapping;
            const range = maxValue - minValue;
            if (isNotDefined(maxValue) || isNotDefined(minValue) || maxValue === minValue) {
                return [];
            }
            const gap = range / (length);
            if (maxValue <= 1) {
                colorMapping.forEach((color, i) => {
                    const val = minValue + (i + 1) * gap;
                    newColor.push(color);
                    newColor.push(val);
                });
            } else {
                colorMapping.forEach((color, i) => {
                    const val = minValue + Number((i + 1) * gap).toFixed();
                    newColor.push(color);
                    newColor.push(val);
                });
            }

            return newColor;
        },
    )

    private getLegendData = memoize(generateLegendData);

    private generatePaint = memoize((color: (string | number)[]) => {
        if (color.length <= 0) {
            return {
                'fill-color': 'white',
                'fill-opacity': 0.1,
            };
        }

        const fillColor = [
            'step',
            ['feature-state', 'value'],
            ...color.slice(0, -1),
        ];

        const fillOpacity = [
            'case',
            ['==', ['feature-state', 'value'], null],
            0.1,
            1,
        ];

        return ({
            'fill-color': fillColor,
            'fill-opacity': fillOpacity,
        });
    })

    private tooltipParams = () => {
        const { vulnerabilityIndicator: key } = this.props;

        const indicator = flatVulnerabilityTypes.find(v => v.key === key);

        return ({
            indicator,
        });
    }

    public render() {
        const {
            vulnerabilityData,
            vulnerabilityIndicator,
        } = this.props;

        const mapState = this.generateMapState(vulnerabilityData, vulnerabilityIndicator);

        const [min, max] = extent(mapState, (d: MapState) => d.value);
        const color = this.generateColor(max, min, colorGrade);
        const colorPaint = this.generatePaint(color);

        const legendData = this.getLegendData(color);

        return (
            <div className={styles.map}>
                <ChoroplethMap
                    sourceKey="risk-info-vulnerability"
                    paint={colorPaint}
                    mapState={mapState}
                    regionLevel={2}
                    tooltipParams={this.tooltipParams}
                    tooltipRenderer={Tooltip}
                />
                { legendData.length > 0 && (
                    <div className={styles.legendContainer}>
                        <h4 className={styles.heading}>
                            Legend
                        </h4>
                        <Legend
                            className={styles.legend}
                            data={legendData}
                            itemClassName={styles.legendItem}
                            keySelector={keySelector}
                            labelSelector={labelSelector}
                            colorSelector={colorSelector}
                            emptyComponent={null}
                        />
                    </div>
                )}
            </div>
        );
    }
}
