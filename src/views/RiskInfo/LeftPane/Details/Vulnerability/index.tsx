/* eslint-disable @typescript-eslint/camelcase */
import React from "react";
import { _cs, mean, sum } from "@togglecorp/fujs";
import { extent } from "d3-array";
import { MapboxGeoJSONFeature } from "mapbox-gl";

import { Translation } from "react-i18next";
import modalize from "#rscg/Modalize";

import { createRequestClient, NewProps, ClientAttributes, methods } from "#request";

import MapShapeEditor from "#re-map/MapShapeEditor";
import { MapChildContext } from "#re-map/context";
import AccentButton from "#rsca/Button/AccentButton";
import Loading from "#components/Loading";
import LayerSelection from "#components/LayerSelection";

import { MultiResponse } from "#store/atom/response/types";
import { VulnerabilityItem, LayerHierarchy } from "#types";
import { Draw } from "#re-map/type";

import { generatePaint, generatePaintByQuantile } from "#utils/domain";

import { Municipality } from "#store/atom/page/types";
import VulnerabilityVisualizations from "./Visualizations";
import vulnerabilityTypes, { flatVulnerabilityTypes } from "./vulnerabilityTypes";

import Summary from "./Summary";
import styles from "./styles.module.scss";

const VisualizationButton = modalize(AccentButton);
const SummaryButton = modalize(AccentButton);

interface OwnProps {
	className: string;
}

interface State {
	vulnerability: VulnerabilityItem[];
	selectedIndicator: string | undefined;
	selectedFeatures: MapboxGeoJSONFeature[] | undefined;
	selectedMunicipalities: Municipality[];
	layers: LayerHierarchy[];
}

interface Params {
	setVulnerability?: (vulnerability: VulnerabilityItem[], layers: LayerHierarchy[]) => void;
	coordinates?: [number, number][];
	setSelectedMunicipalities?: (municipalities: Municipality[]) => void;
}

type Props = NewProps<OwnProps, Params>;

const colorGrade = ["#c73c32", "#d98452", "#e9bf8c", "#fff5d8", "#d3dba0", "#94c475", "#31ad5c"];

const VulnerabilityTooltipOutput = ({ label, value }) => (
	<div className={styles.vulnerabilityTooltipOutput}>
		<div className={styles.label}>{label}</div>
		<div className={styles.value}>{value}</div>
	</div>
);

const VulnerabilityTooltip = ({ feature, layer }) => (
	<div className={styles.vulnerabilityTooltip}>
		<h3 className={styles.heading}>{feature.properties.title}</h3>
		<div className={styles.content}>
			<VulnerabilityTooltipOutput label={layer.layername} value={feature.state.value} />
		</div>
	</div>
);

const transformVulnerabilityToLayer = (vulnerability, data) => {
	const colors =
		vulnerability.indicatorType === "negative" ? [...colorGrade].reverse() : [...colorGrade];

	const mapState = data.map((d) => ({
		id: d.municipality,
		value: d.data[vulnerability.id] || 0,
	}));

	// Fetch data for a specfic Vulnerability
	const specificData: number[] = data.map((d) => d.data[vulnerability.id] || 0);

	const [min, max] = extent(mapState, (d) => d.value);
	// const { paint, legend } = generatePaint(colors, min, max);
	const { paint, legend } = generatePaintByQuantile(
		colors,
		min,
		max,
		specificData,
		colorGrade.length
	);

	return {
		...vulnerability,
		type: "choropleth",
		adminLevel: "municipality",
		layername: vulnerability.title,
		opacity: 1,
		mapState,
		paint,
		legend,
		tooltipRenderer: VulnerabilityTooltip,
		minValue: min,
	};
};

const createChoroplethLayer = (data) => {
	const layers = vulnerabilityTypes.map((vulnerability) => {
		const layer = transformVulnerabilityToLayer(vulnerability, data);

		if (vulnerability.children.length > 0) {
			layer.children = vulnerability.children.map((vc) => transformVulnerabilityToLayer(vc, data));
		}

		return layer;
	});

	return layers;
};

const requestOptions: { [key: string]: ClientAttributes<OwnProps, Params> } = {
	vulnerabilityGetRequest: {
		url: "/vulnerability/",
		method: methods.GET,
		onMount: true,
		onSuccess: ({ response, params: { setVulnerability } = { setVulnerability: undefined } }) => {
			const { results } = response as MultiResponse<VulnerabilityItem>;
			if (setVulnerability) {
				const layers = createChoroplethLayer(results);
				setVulnerability(results, layers);
			}
		},
	},
	polygonMunicipalityGetRequest: {
		url: "/municipality/",
		method: methods.GET,
		onMount: false,
		query: ({ params }) => {
			if (!params || !params.coordinates) {
				return undefined;
			}

			return {
				// eslint-disable-next-line @typescript-eslint/camelcase
				boundary__within: JSON.stringify({
					type: "Polygon",
					coordinates: params.coordinates,
				}),
			};
		},
		onSuccess: ({ response, params }) => {
			if (params && params.setSelectedMunicipalities) {
				const { setSelectedMunicipalities } = params;
				const serverResponse = response as MultiResponse<Municipality>;
				setSelectedMunicipalities(serverResponse.results);
			}
		},
	},
};

class Vulnerability extends React.PureComponent<Props, State> {
	public constructor(props: Props) {
		super(props);

		this.state = {
			vulnerability: [],
			selectedIndicator: undefined,
			selectedFeatures: undefined,
			selectedMunicipalities: [],
			layers: [],
		};

		const {
			requests: { vulnerabilityGetRequest },
		} = this.props;

		vulnerabilityGetRequest.setDefaultParams({
			setVulnerability: (data: VulnerabilityItem[], layers: LayerHierarchy[]) => {
				this.setState({
					vulnerability: data,
					layers,
				});
			},
		});
	}

	private getSummaryData = (vulnerability: VulnerabilityItem[], municipalities: Municipality[]) => {
		if (municipalities.length === 0) {
			return flatVulnerabilityTypes.map((f) => {
				const values = vulnerability.map((v) => v.data[f.id] || 0);
				if (f.valueType === "index") {
					return {
						...f,
						value: mean(values),
					};
				}
				return {
					...f,
					value: sum(values),
				};
			});
		}

		return flatVulnerabilityTypes.map((f) => {
			const values = vulnerability
				.filter((v) => municipalities.some((m) => m.id === v.municipality))
				.map((v) => v.data[f.id] || 0);

			if (f.valueType === "index") {
				return {
					...f,
					value: mean(values),
				};
			}
			return {
				...f,
				value: sum(values),
			};
		});
	};

	private setSelectedMunicipalities = (municipalities: Municipality[]) => {
		this.setState({ selectedMunicipalities: municipalities });
	};

	private handlePolygonCreate = (features: MapboxGeoJSONFeature[], draw: Draw | undefined) => {
		const {
			requests: { polygonMunicipalityGetRequest },
		} = this.props;

		const { selectedFeatures } = this.state;

		if (selectedFeatures && draw) {
			selectedFeatures.forEach((feature) => {
				draw.delete(feature.id);
			});
		}

		this.setState(
			{
				selectedFeatures: features,
				selectedMunicipalities: [],
			},
			() => {
				polygonMunicipalityGetRequest.do({
					coordinates: features[0].geometry.coordinates,
					setSelectedMunicipalities: this.setSelectedMunicipalities,
				});
			}
		);
	};

	private handlePolygonUpdate = (features: MapboxGeoJSONFeature[], draw: Draw | undefined) => {
		const {
			requests: { polygonMunicipalityGetRequest },
		} = this.props;
		this.setState(
			{
				selectedFeatures: features,
			},
			() => {
				polygonMunicipalityGetRequest.do({
					coordinates: features[0].geometry.coordinates,
					setSelectedMunicipalities: this.setSelectedMunicipalities,
				});
			}
		);
	};

	private handlePolygonDelete = (_: MapboxGeoJSONFeature[]) => {
		this.setState({
			selectedFeatures: undefined,
			selectedMunicipalities: [],
		});
	};

	public render() {
		const { className, requests } = this.props;

		const { vulnerability, selectedIndicator, layers, selectedMunicipalities } = this.state;

		const {
			vulnerabilityGetRequest: { pending },
			polygonMunicipalityGetRequest: { pending: municipalityPending },
		} = requests;

		const summaryData = this.getSummaryData(vulnerability, selectedMunicipalities);

		return (
			<Translation>
				{(t) => (
					<div className={_cs(styles.vulnerability, className)}>
						<Loading pending={pending} />
						<header className={styles.header}>
							<h2 className={styles.heading}>{t("Layers")}</h2>
							<VisualizationButton
								transparent
								className={styles.visualizationButton}
								disabled={pending}
								modal={
									<VulnerabilityVisualizations
										data={vulnerability}
										selectedIndicator={selectedIndicator}
									/>
								}>
								{t("Show visualizations")}
							</VisualizationButton>
							{/*
							 * TODO: uncomment this section on additional info
							 */}
							{/* <SummaryButton
                        transparent
                        className={styles.summaryButton}
                        pending={municipalityPending}
                        modal={(
                        <Summary
                        data={summaryData}
                        municipalities={selectedMunicipalities}
                        />
                        )}
                        >
                        {selectedMunicipalities.length > 0
                        ? `Show summary (${selectedMunicipalities.length})`
                        : 'Show summary'
                        }
                        </SummaryButton> */}
						</header>
						<LayerSelection className={styles.content} layerList={layers} pending={pending} />
						{/* <MapShapeEditor
                // geoJsons={selectedFeatures}
                    polygon
                    trash
                /> */}
					</div>
				)}
			</Translation>
		);
	}
}

Vulnerability.contextType = MapChildContext;
export default createRequestClient(requestOptions)(Vulnerability);
