import React from 'react';
import { _cs } from '@togglecorp/fujs';
import { connect } from 'react-redux';
import { extent } from 'd3-array';

import modalize from '#rscg/Modalize';

import {
    createRequestClient,
    NewProps,
    ClientAttributes,
    methods,
} from '#request';

// import MapShapeEditor from '#re-map/MapShapeEditor';
import { MapChildContext } from '#re-map/context';
import AccentButton from '#rsca/Button/AccentButton';
import Loading from '#components/Loading';
import LayerSelection from '#components/LayerSelection';

import { municipalitiesMapSelector } from '#selectors';
import { MultiResponse } from '#store/atom/response/types';
import {
    VulnerabilityItem,
    VulnerabilityType,
} from '#types';

import { generatePaint } from '#utils/domain';

import VulnerabilityVisualizations from './Visualizations';
import vulnerabilityTypes from './vulnerabilityTypes';

import styles from './styles.scss';

const VisualizationButton = modalize(AccentButton);

interface OwnProps {
    className: string;
}

interface State {
    vulnerability: VulnerabilityItem[];
    selectedIndicator: string | undefined;
    selectedType: VulnerabilityType | undefined;
}

interface Params {
    setVulnerability?: (vulnerability: VulnerabilityItem[]) => void;
}

interface VulnerabilityTypeParams {
    vulnerability: VulnerabilityType;
    labelSelector: (data: VulnerabilityType) => string;
    keySelector: (data: VulnerabilityType) => string;
    onClick: (key: string) => void;
    selectedIndicator: string | undefined;
}

type Props = NewProps<OwnProps, Params>;

const colorGrade = [
    '#ba0000',
    '#c6490a',
    '#d17124',
    '#dc9343',
    '#e6b467',
    '#f1d48e',
    '#fff2ba',
    '#e8e59d',
    '#ccda84',
    '#adcf6d',
    '#89c45a',
    '#5db94b',
    '#00ae41',
];

const transformVulnerabilityToLayer = (vulnerability, data) => {
    const colors = vulnerability.indicatorType === 'negative' ? [...colorGrade].reverse() : [...colorGrade];

    const mapState = data.map(d => ({
        id: d.municipality,
        value: d.data[vulnerability.id],
    }));

    const [min, max] = extent(mapState, d => d.value);
    const paint = generatePaint(colors, min, max);

    return {
        ...vulnerability,
        type: 'choropleth',
        adminLevel: 'municipality',
        layername: vulnerability.title,
        opacity: 1,
        mapState,
        paint,
    };
};

const createChoroplethLayer = (data) => {
    const layers = vulnerabilityTypes.map((vulnerability) => {
        const layer = transformVulnerabilityToLayer(vulnerability, data);

        if (vulnerability.children.length > 0) {
            layer.children = vulnerability.children.map(
                vc => transformVulnerabilityToLayer(vc, data),
            );
        }

        return layer;
    });

    return layers;
};

const requests: { [key: string]: ClientAttributes<OwnProps, Params>} = {
    vulnerabilityGetRequest: {
        url: '/vulnerability/',
        method: methods.GET,
        onMount: true,
        onSuccess: ({
            response,
            params: { setVulnerability } = { setVulnerability: undefined },
        }) => {
            const { results } = response as MultiResponse<VulnerabilityItem>;
            if (setVulnerability) {
                const layers = createChoroplethLayer(results);
                setVulnerability(results, layers);
            }
        },
    },
};

const mapStateToProps = state => ({
    municipalities: municipalitiesMapSelector(state),
});

const vulnerabilityKeySelector = (data: VulnerabilityType) => data.key;
const vulnerabilityLabelSelector = (data: VulnerabilityType) => data.label;

class Vulnerability extends React.PureComponent<Props, State> {
    public constructor(props: Props) {
        super(props);

        this.state = {
            vulnerability: [],
            selectedIndicator: undefined,
            selectedType: undefined,
            layers: [],
            municipalitiesInsidePolygon: [],
        };

        const {
            requests: {
                vulnerabilityGetRequest,
            },
        } = this.props;

        vulnerabilityGetRequest.setDefaultParams({
            setVulnerability: (data: VulnerabilityItem[], layers) => {
                this.setState({
                    vulnerability: data,
                    layers,
                });
            },
        });
    }

    private handlePolygonCreate = (features) => {
        console.warn('polygon created with features:', features);
    }

    private handlePolygonUpdate = (features) => {
        console.warn('polygon updated with features:', features);
    }

    public render() {
        const {
            className,
            requests: {
                vulnerabilityGetRequest: {
                    pending,
                },
            },
        } = this.props;

        const {
            vulnerability,
            selectedType,
            selectedIndicator,
            municipalitiesInsidePolygon,
            layers,
        } = this.state;

        return (
            <div className={_cs(styles.vulnerability, className)}>
                <Loading pending={pending} />
                <header className={styles.header}>
                    <h2 className={styles.heading}>
                        Layers
                    </h2>
                    <VisualizationButton
                        transparent
                        className={styles.visualizationButton}
                        disabled={pending}
                        modal={(
                            <VulnerabilityVisualizations
                                data={vulnerability}
                                selectedIndicator={selectedIndicator}
                            />
                        )}
                    >
                        Show visualizations
                    </VisualizationButton>
                    <AccentButton
                        transparent
                        className={styles.summaryButton}
                        disabled
                    >
                        Show summary
                    </AccentButton>
                </header>
                <LayerSelection
                    className={styles.content}
                    layerList={layers}
                    pending={pending}
                />
                { municipalitiesInsidePolygon.length !== 0 && (
                    <div>
                        { municipalitiesInsidePolygon.length }
                    </div>
                )}
                {/*
                <MapShapeEditor
                    onCreate={this.handlePolygonCreate}
                    onUpdate={this.handlePolygonUpdate}
                    drawOptions={{
                        displayControlsDefault: false,
                        controls: {
                            polygon: true,
                            trash: true,
                        },
                    }}
                />
                */}
            </div>
        );
    }
}

Vulnerability.contextType = MapChildContext;
export default connect(mapStateToProps)(createRequestClient(requests)(Vulnerability));
