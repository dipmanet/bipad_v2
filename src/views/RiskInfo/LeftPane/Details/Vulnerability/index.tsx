import React from 'react';
import { _cs } from '@togglecorp/fujs';
import { compose } from 'redux';

import RadioInput from '#components/RadioInput';
import DangerButton from '#rsca/Button/DangerButton';

import {
    createRequestClient,
    NewProps,
    ClientAttributes,
    methods,
} from '#request';

import { MultiResponse } from '#store/atom/response/types';
import { VulnerabilityItem } from '#types';

import Loading from '#components/Loading';

import Map from './VulnerabilityMap';

import styles from './styles.scss';

interface OwnProps {
    className?: string;
}

interface State {
    vulnerability: VulnerabilityItem[];
    selectedIndicator?: string;
}

interface Params {
    setVulnerability?: (vulnerability: VulnerabilityItem[]) => void;
}

type Props = NewProps<OwnProps, Params>;

interface VulnerabilityIndicatorOption {
    key: string;
    label: string;
}

const vulnerabilityDataOptions: VulnerabilityIndicatorOption[] = [
    { key: 'HDI', label: 'HDI' },
    { key: 'radio', label: 'radio' },
    { key: 'computer', label: 'computer' },
    { key: 'internet', label: 'internet' },
    { key: 'percapita', label: 'percapita' },
    { key: 'tapWater', label: 'tapWater' },
    { key: 'remoteness', label: 'remoteness' },
    { key: 'riskSource', label: 'riskSource' },
    { key: 'telePhone', label: 'telePhone' },
    { key: 'television', label: 'television' },
    { key: 'wellWater', label: 'wellWater' },
    { key: 'noFacility', label: 'noFacility' },
    { key: 'riverWater', label: 'riverWater' },
    { key: 'spoutWater', label: 'spoutWater' },
    { key: 'boysStudent', label: 'boysStudent' },
    { key: 'flushToilet', label: 'flushToilet' },
    { key: 'mobilePhone', label: 'mobilePhone' },
    { key: 'oneFacility', label: 'oneFacility' },
    { key: 'othersWater', label: 'othersWater' },
    { key: 'totalSchool', label: 'totalSchool' },
    { key: 'girlsStudent', label: 'girlsStudent' },
    { key: 'totalStudent', label: 'totalStudent' },
    { key: 'lifeExpectancy', label: 'lifeExpectancy' },
    { key: 'ordinaryToilet', label: 'ordinaryToilet' },
    { key: 'cableTelevision', label: 'cableTelevision' },
    { key: 'communitySchool', label: 'communitySchool' },
    { key: 'notStatedWater', label: 'notStatedWater' },
    { key: 'noToiletFacility', label: 'noToiletFacility' },
    { key: 'institutionalSchool', label: 'institutionalSchool' },
    { key: 'coveredWellKuwaWater', label: 'coveredWellKuwaWater' },
    { key: 'uncoveredWellKuwaWater', label: 'uncoveredWellKuwaWater' },
    { key: 'toiletFacilityNotStated', label: 'toiletFacilityNotStated' },
];

const labelSelector = (d: VulnerabilityIndicatorOption) => d.label;
const keySelector = (d: VulnerabilityIndicatorOption) => d.key;

const requests: { [key: string]: ClientAttributes<OwnProps, Params>} = {
    vulnerabilityGetRequest: {
        url: '/vulnerability/',
        method: methods.GET,
        onMount: true,
        onSuccess: ({
            response,
            params: { setVulnerability } = { setVulnerability: undefined },
        }) => {
            const { results } = response as MultiResponse<VulnerabilityItem>;
            if (setVulnerability) {
                setVulnerability(results);
            }
        },
    },
};

class Vulnerability extends React.PureComponent<Props, State> {
    public constructor(props: Props) {
        super(props);

        this.state = {
            vulnerability: [],
            selectedIndicator: 'HDI',
        };

        const {
            requests: {
                vulnerabilityGetRequest,
            },
        } = this.props;

        vulnerabilityGetRequest.setDefaultParams({
            setVulnerability: (data: VulnerabilityItem[]) => {
                this.setState({
                    vulnerability: data,
                });
            },
        });
    }

    private handleIndicatorUnselect = () => {
        console.warn('handleIndicatorUnselect called');
        this.setState({
            selectedIndicator: undefined,
        });
    }

    private onChange = (key: string) => {
        this.setState({
            selectedIndicator: key,
        });
    }

    public render() {
        const {
            className,
            requests: {
                vulnerabilityGetRequest: {
                    pending,
                },
            },
        } = this.props;

        const {
            vulnerability,
            selectedIndicator,
        } = this.state;

        console.warn('selectedIndicator', selectedIndicator);

        return (
            <>
                <Loading pending={pending} />
                <div className={_cs(styles.vulnerability, className)}>
                    Vulnerability
                </div>
                <RadioInput
                    title={(
                        <header className={styles.header}>
                            <h4 className={styles.heading}>
                                Layers
                            </h4>
                            <DangerButton
                                disabled={!selectedIndicator}
                                onClick={this.handleIndicatorUnselect}
                                className={styles.clearButton}
                                transparent
                            >
                                Clear
                            </DangerButton>
                        </header>
                    )}
                    className={styles.layerList}
                    contentClassName={styles.content}
                    options={vulnerabilityDataOptions}
                    labelSelector={labelSelector}
                    keySelector={keySelector}
                    onChange={this.onChange}
                    value={selectedIndicator}
                />
                <Map
                    vulnerabilityData={vulnerability}
                    vulnerabilityIndicator={selectedIndicator}
                />
            </>
        );
    }
}

export default compose(createRequestClient(requests))(Vulnerability);
