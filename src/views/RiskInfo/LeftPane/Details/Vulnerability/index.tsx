import React from 'react';
import { _cs } from '@togglecorp/fujs';
import { compose } from 'redux';

import {
    createRequestClient,
    NewProps,
    ClientAttributes,
    methods,
} from '#request';

import ListView from '#rscv/List/ListView';
import Option from '#components/RadioInput/Option';
import DangerButton from '#rsca/Button/DangerButton';
import Icon from '#rscg/Icon';
import ExpandableView from '#components/ExpandableView';
import Loading from '#components/Loading';

import { MultiResponse } from '#store/atom/response/types';
import {
    VulnerabilityItem,
    VulnerabilityType,
} from '#types';

import vulnerabilityTypes from './vulnerabilityTypes';
import Map from './VulnerabilityMap';

import styles from './styles.scss';

interface OwnProps {
    className: string;
}

interface State {
    vulnerability: VulnerabilityItem[];
    selectedIndicator: string | undefined;
}

interface Params {
    setVulnerability?: (vulnerability: VulnerabilityItem[]) => void;
}

interface VulnerabilityTypeParams {
    vulnerability: VulnerabilityType;
    labelSelector: (data: VulnerabilityType) => string;
    keySelector: (data: VulnerabilityType) => string;
    onClick: (key: string) => void;
    selectedIndicator: string | undefined;
}

type Props = NewProps<OwnProps, Params>;

const requests: { [key: string]: ClientAttributes<OwnProps, Params>} = {
    vulnerabilityGetRequest: {
        url: '/vulnerability/',
        method: methods.GET,
        onMount: true,
        onSuccess: ({
            response,
            params: { setVulnerability } = { setVulnerability: undefined },
        }) => {
            const { results } = response as MultiResponse<VulnerabilityItem>;
            if (setVulnerability) {
                setVulnerability(results);
            }
        },
    },
};

const VulnerabilitySelection = (option: VulnerabilityTypeParams) => {
    const {
        vulnerability,
        labelSelector,
        keySelector,
        onClick,
        selectedIndicator,
    } = option;

    const rendererParams = (_: string, v: VulnerabilityType) => ({
        vulnerability: v,
        labelSelector,
        keySelector,
        onClick,
        selectedIndicator,
    });

    return (
        vulnerability.children && (
            vulnerability.children.length < 1 ? (
                <div className={styles.layer}>
                    <Option
                        label={labelSelector(vulnerability)}
                        onClick={onClick}
                        optionKey={keySelector(vulnerability)}
                        isActive={selectedIndicator === keySelector(vulnerability)}
                    />
                </div>
            ) : (
                <div className={styles.layerGroup}>
                    <ExpandableView
                        headerClassName={styles.header}
                        headerContent={labelSelector(vulnerability)}
                        expandableContent={(
                            <ListView
                                className={styles.content}
                                data={vulnerability.children}
                                keySelector={keySelector}
                                renderer={VulnerabilitySelection}
                                rendererParams={rendererParams}
                            />
                        )}
                    />
                </div>
            )
        )
    );
};

const vulnerabilityKeySelector = (data: VulnerabilityType) => data.key;
const vulnerabilityLabelSelector = (data: VulnerabilityType) => data.label;

class Vulnerability extends React.PureComponent<Props, State> {
    public constructor(props: Props) {
        super(props);

        this.state = {
            vulnerability: [],
            selectedIndicator: undefined,
        };

        const {
            requests: {
                vulnerabilityGetRequest,
            },
        } = this.props;

        vulnerabilityGetRequest.setDefaultParams({
            setVulnerability: (data: VulnerabilityItem[]) => {
                this.setState({
                    vulnerability: data,
                });
            },
        });
    }

    private handleClearSelection = () => {
        this.setState({
            selectedIndicator: undefined,
        });
    }

    private handleClick = (key: string) => {
        this.setState({
            selectedIndicator: key,
        });
    }

    private getVulnerabilityTypeRendererParams = (
        _: string,
        vulnerability: VulnerabilityType,
    ) => {
        const { selectedIndicator } = this.state;

        return ({
            vulnerability,
            keySelector: vulnerabilityKeySelector,
            labelSelector: vulnerabilityLabelSelector,
            onClick: this.handleClick,
            selectedIndicator,
        });
    }

    public render() {
        const {
            className,
            requests: {
                vulnerabilityGetRequest: {
                    pending,
                },
            },
        } = this.props;

        const {
            vulnerability,
            selectedIndicator,
        } = this.state;

        return (
            <div className={_cs(styles.vulnerability, className)}>
                <Loading pending={pending} />
                <div className={styles.info}>
                    <Icon
                        className={styles.icon}
                        name="info"
                    />
                    <div className={styles.text}>
                        Vulnerability data available only on district level
                    </div>
                </div>
                <header className={styles.header}>
                    <h4 className={styles.heading}>
                        Layers
                    </h4>
                    <DangerButton
                        disabled={!selectedIndicator}
                        onClick={this.handleClearSelection}
                        className={styles.clearButton}
                        transparent
                    >
                        Clear
                    </DangerButton>
                </header>
                <ListView
                    className={styles.content}
                    data={vulnerabilityTypes}
                    keySelector={vulnerabilityKeySelector}
                    renderer={VulnerabilitySelection}
                    rendererParams={this.getVulnerabilityTypeRendererParams}
                />
                <Map
                    vulnerabilityData={vulnerability}
                    vulnerabilityIndicator={selectedIndicator}
                />
            </div>
        );
    }
}

export default compose(createRequestClient(requests))(Vulnerability);
